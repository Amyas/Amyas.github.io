(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{499:function(t,a,s){"use strict";s.r(a);var r=s(13),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),a("h2",{attrs:{id:"洗牌算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#洗牌算法"}},[t._v("#")]),t._v(" 洗牌算法")]),t._v(" "),a("h2",{attrs:{id:"求斐波那契数列第-n-项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求斐波那契数列第-n-项"}},[t._v("#")]),t._v(" 求斐波那契数列第 N 项")]),t._v(" "),a("h2",{attrs:{id:"写个二叉树遍历-深度优先广度优先"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写个二叉树遍历-深度优先广度优先"}},[t._v("#")]),t._v(" 写个二叉树遍历，深度优先广度优先")]),t._v(" "),a("h2",{attrs:{id:"给定任意二维数组-输出所有的排列组合项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给定任意二维数组-输出所有的排列组合项"}},[t._v("#")]),t._v(" 给定任意二维数组，输出所有的排列组合项")]),t._v(" "),a("p",[t._v("https://juejin.cn/post/6862585470375690253\n比如 [['A','B'], ['a','b'], ['1', '2']]，输出 ['Aa1','Aa2','Ab1','Ab2','Ba1','Ba2','Bb1','Bb2']")]),t._v(" "),a("h2",{attrs:{id:"实现一个二叉树中序遍历的迭代器-时间复杂度最好是多少-最差是多少-空间复杂度是多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现一个二叉树中序遍历的迭代器-时间复杂度最好是多少-最差是多少-空间复杂度是多少"}},[t._v("#")]),t._v(" 实现一个二叉树中序遍历的迭代器，时间复杂度最好是多少，最差是多少，空间复杂度是多少")]),t._v(" "),a("h2",{attrs:{id:"输入一个字符串-遇到方括号则对方括号内的字符串重复n次-n是方括号前面的数字-如果没有数字则为1次-可能存在嵌套"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入一个字符串-遇到方括号则对方括号内的字符串重复n次-n是方括号前面的数字-如果没有数字则为1次-可能存在嵌套"}},[t._v("#")]),t._v(" 输入一个字符串，遇到方括号则对方括号内的字符串重复n次，n是方括号前面的数字，如果没有数字则为1次，可能存在嵌套")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/decode-string/")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" test1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a2[b]a2[b2[c]]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abbabccbcc")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" test2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2[3[c]]a2a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cccccca2a")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" test3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[abc][d]3[e2]4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abcde2e2e24")]),t._v("\n")])])]),a("h2",{attrs:{id:"一个字符串的全排列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个字符串的全排列"}},[t._v("#")]),t._v(" 一个字符串的全排列")]),t._v(" "),a("h2",{attrs:{id:"反转链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反转链表"}},[t._v("#")]),t._v(" 反转链表")]),t._v(" "),a("h2",{attrs:{id:"二分查找的时间复杂度是多少-简要描述一下过程-o-logn-是怎么算出来的-topk-的时间复杂度是多少-快排的时间复杂度是多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二分查找的时间复杂度是多少-简要描述一下过程-o-logn-是怎么算出来的-topk-的时间复杂度是多少-快排的时间复杂度是多少"}},[t._v("#")]),t._v(" 二分查找的时间复杂度是多少，简要描述一下过程，O(logN)是怎么算出来的，TopK 的时间复杂度是多少，快排的时间复杂度是多少")]),t._v(" "),a("h2",{attrs:{id:"输入一个二叉树和两个-node-输出这两个-node-的最近公共祖先"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入一个二叉树和两个-node-输出这两个-node-的最近公共祖先"}},[t._v("#")]),t._v(" 输入一个二叉树和两个 node，输出这两个 node 的最近公共祖先")]),t._v(" "),a("h2",{attrs:{id:"如果让你实现一个计算器-都需要考虑哪些问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果让你实现一个计算器-都需要考虑哪些问题"}},[t._v("#")]),t._v(" 如果让你实现一个计算器，都需要考虑哪些问题")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/basic-calculator-ii/")]),t._v(" "),a("h2",{attrs:{id:"接触过哪些排序算法-归并排序的思路是什么-一个数组做归并排序的话-一共经历了多少次合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接触过哪些排序算法-归并排序的思路是什么-一个数组做归并排序的话-一共经历了多少次合并"}},[t._v("#")]),t._v(" 接触过哪些排序算法，归并排序的思路是什么，一个数组做归并排序的话，一共经历了多少次合并")]),t._v(" "),a("h2",{attrs:{id:"对一个树形结构遍历-输出所有叶子节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对一个树形结构遍历-输出所有叶子节点"}},[t._v("#")]),t._v(" 对一个树形结构遍历，输出所有叶子节点")]),t._v(" "),a("h2",{attrs:{id:"最长递增子序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最长递增子序列"}},[t._v("#")]),t._v(" 最长递增子序列")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/longest-increasing-subsequence/")]),t._v(" "),a("h2",{attrs:{id:"最长连续递增子序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最长连续递增子序列"}},[t._v("#")]),t._v(" 最长连续递增子序列")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/")]),t._v(" "),a("h2",{attrs:{id:"搜索旋转排序数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搜索旋转排序数组"}},[t._v("#")]),t._v(" 搜索旋转排序数组")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/search-in-rotated-sorted-array/")]),t._v(" "),a("h2",{attrs:{id:"合并两个有序数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并两个有序数组"}},[t._v("#")]),t._v(" 合并两个有序数组")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/merge-sorted-array/")]),t._v(" "),a("h2",{attrs:{id:"合并多个有序数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并多个有序数组"}},[t._v("#")]),t._v(" 合并多个有序数组")]),t._v(" "),a("h2",{attrs:{id:"lru算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lru算法"}},[t._v("#")]),t._v(" LRU算法")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/lru-cache/")]),t._v(" "),a("p",[t._v("（这个题我最开始用Map做的，面试官跟我说如果不用Map，如何实现每次查询和删除都能做到O(1)，我没思路，面试官问我查询O(1)用什么，我说用哈希，问我插入删除O(1)用什么，我说用链表，可我不知道怎么结合到一起，面试官提示我可以用双向链表，然后我才做出来的）")]),t._v(" "),a("h2",{attrs:{id:"求一个字符串的不重复的最长字串的长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求一个字符串的不重复的最长字串的长度"}},[t._v("#")]),t._v(" 求一个字符串的不重复的最长字串的长度")]),t._v(" "),a("p",[t._v("https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/")]),t._v(" "),a("h2",{attrs:{id:"单向链表反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向链表反转"}},[t._v("#")]),t._v(" 单向链表反转")]),t._v(" "),a("h2",{attrs:{id:"快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),a("h2",{attrs:{id:"输出数组中频率第二高的元素的下标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出数组中频率第二高的元素的下标"}},[t._v("#")]),t._v(" 输出数组中频率第二高的元素的下标")]),t._v(" "),a("h2",{attrs:{id:"抢红包算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抢红包算法"}},[t._v("#")]),t._v(" 抢红包算法")])])}),[],!1,null,null,null);a.default=e.exports}}]);