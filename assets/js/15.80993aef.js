(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{286:function(t,a,s){"use strict";s.r(a);var r=s(13),h=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_4-通用寄存器-内存读写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-通用寄存器-内存读写"}},[t._v("#")]),t._v(" 4.通用寄存器&内存读写")]),t._v(" "),a("h2",{attrs:{id:"_1-通用寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-通用寄存器"}},[t._v("#")]),t._v(" 1.通用寄存器")]),t._v(" "),a("h3",{attrs:{id:"通用寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用寄存器"}},[t._v("#")]),t._v(" 通用寄存器")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-46-57.png",alt:"42022-09-01-16-46-57",width:"",height:""}}),t._v(" "),a("h3",{attrs:{id:"mov-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mov-指令"}},[t._v("#")]),t._v(" mov 指令")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-47-28.png",alt:"42022-09-01-16-47-28",width:"",height:""}}),t._v(" "),a("h3",{attrs:{id:"add-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-指令"}},[t._v("#")]),t._v(" add 指令")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-54-06.png",alt:"42022-09-01-16-54-06",width:"",height:""}}),t._v(" "),a("h3",{attrs:{id:"sub-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sub-指令"}},[t._v("#")]),t._v(" sub 指令")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-54-20.png",alt:"42022-09-01-16-54-20",width:"",height:""}}),t._v(" "),a("h3",{attrs:{id:"and-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#and-指令"}},[t._v("#")]),t._v(" and 指令")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-54-34.png",alt:"42022-09-01-16-54-34",width:"",height:""}}),t._v(" "),a("h3",{attrs:{id:"or-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#or-指令"}},[t._v("#")]),t._v(" or 指令")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-54-45.png",alt:"42022-09-01-16-54-45",width:"",height:""}}),t._v(" "),a("h3",{attrs:{id:"xor-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xor-指令"}},[t._v("#")]),t._v(" xor 指令")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-54-58.png",alt:"42022-09-01-16-54-58",width:"",height:""}}),t._v(" "),a("h3",{attrs:{id:"not-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#not-指令"}},[t._v("#")]),t._v(" not 指令")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-16-55-09.png",alt:"42022-09-01-16-55-09",width:"",height:""}}),t._v(" "),a("h2",{attrs:{id:"_2-内存读写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存读写"}},[t._v("#")]),t._v(" 2.内存读写")]),t._v(" "),a("h3",{attrs:{id:"寄存器与内存的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄存器与内存的区别"}},[t._v("#")]),t._v(" 寄存器与内存的区别：")]),t._v(" "),a("p",[t._v("1、寄存器位于 CPU 内部，执行速度快，但比较贵。")]),t._v(" "),a("p",[t._v("2、内存速度相对较慢，但成本较低，所以可以做的很大。")]),t._v(" "),a("p",[t._v("3、寄存器和内存没有本质区别，都是用于存储数据的容器，都是定宽的。")]),t._v(" "),a("p",[t._v("4、寄存器常用的有 8 个：EAX、ECX、EDX、EBX、ESP、EBP、ESI、EDI。")]),t._v(" "),a("p",[t._v("5、计算机中的几个常用计量单位：BYTE WORD DWORD")]),t._v(" "),a("p",[t._v("BYTE 　字节　＝　 8(BIT)")]),t._v(" "),a("p",[t._v("WORD 字 = 16(BIT)")]),t._v(" "),a("p",[t._v("DWORD 双字 = 32(BIT)")]),t._v(" "),a("p",[t._v("1KB = 1024 BYTE\n1MB = 1024 KB\n1GB = 1024 MB")]),t._v(" "),a("p",[t._v("6、内存的数量特别庞大，无法每个内存单元都起一个名字，所以用编号来代替，我们称计算机 CPU 是 32 位或者 64 位，主要指的就是内存编号的宽度，而不是寄存器的宽度。\n有很多书上说之所以叫 32 位计算机是因为寄存器的宽度是 32 位，是不准确的，因为还有很多寄存器是大于 32 位的。")]),t._v(" "),a("p",[t._v("计算机内存的每一个字节会有一个编号(即内存编号的单位是字节)，如下图：")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-18-10-49.png",alt:"42022-09-01-18-10-49",width:"",height:""}}),t._v(" "),a("p",[t._v("32 位计算机的编号最大是 32 位，也就是 32 个 1 换成 16 进制为 FFFFFFFF，也就是说，32 位计算机内存寻址的最大范围是 FFFFFFFF+1\n内存的单位是字节，那内存中能存储的信息最多为：FFFFFFFF+1 字节 即 4G，这也是为什么我们在一个 XP 的系统上面如果物理内存超过 4G 是没有意义的原因。")]),t._v(" "),a("h3",{attrs:{id:"内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存"}},[t._v("#")]),t._v(" 内存")]),t._v(" "),a("h4",{attrs:{id:"内存格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存格式"}},[t._v("#")]),t._v(" 内存格式")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/42022-09-01-18-11-34.png",alt:"42022-09-01-18-11-34",width:"",height:""}}),t._v(" "),a("p",[t._v("1、每个内存单元的宽度为 8")]),t._v(" "),a("p",[t._v("2、[编号]称为地址")]),t._v(" "),a("p",[t._v("3、地址的作用：当我们想从内存中读取数据或者想向内存中写入数据，首先应该找到要读、写的位置。就像写信要写地址一样。")]),t._v(" "),a("h4",{attrs:{id:"从指定内存中写入-读取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从指定内存中写入-读取数据"}},[t._v("#")]),t._v(" 从指定内存中写入/读取数据")]),t._v(" "),a("p",[t._v("mov dword ptr ds:[0x0012FF34],0x12345678")]),t._v(" "),a("p",[t._v("mov eax,dword ptr ds:[0x0012FF34]")]),t._v(" "),a("p",[t._v("dword ：要读/写多少 此时是 4 字节 byte == 1 字节 word == 2 字节")]),t._v(" "),a("p",[t._v("ptr: Point 代表后面是一个指针 (指针的意思就是里面存的不是普通的值，而是个地址)")]),t._v(" "),a("p",[t._v("ds：段寄存器 先不用管 记住就行")]),t._v(" "),a("p",[t._v("0x0012FF34:内存编号，必须是 32 位的 前面 0 可以省略")]),t._v(" "),a("p",[t._v("注意：地址编号不要随便写，因为内存是有保护的，并不是所有的内存都可以直接读写(需要特别处理)")]),t._v(" "),a("p",[t._v("建议地址编号写成 esp 的值")])])}),[],!1,null,null,null);a.default=h.exports}}]);