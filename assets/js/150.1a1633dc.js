(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{419:function(t,a,s){"use strict";s.r(a);var n=s(13),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_5、eventloop事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、eventloop事件循环"}},[t._v("#")]),t._v(" 5、EventLoop事件循环")]),t._v(" "),a("p",[t._v("详细介绍了全过程\nhttps://www.bilibili.com/video/BV1oV411k7XY")]),t._v(" "),a("p",[t._v("https://juejin.cn/post/6844903764202094606?utm_source=gold_browser_extension#heading-0")]),t._v(" "),a("h2",{attrs:{id:"一、为什么javascript是单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么javascript是单线程"}},[t._v("#")]),t._v(" 一、为什么JavaScript是单线程？")]),t._v(" "),a("p",[t._v("JavaScript语言的一大特点就是单线程，也就是说，同一时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。")]),t._v(" "),a("p",[t._v("JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？")]),t._v(" "),a("p",[t._v("所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特性，将来也不会改变。")]),t._v(" "),a("p",[t._v("为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。")]),t._v(" "),a("h2",{attrs:{id:"二、任务队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、任务队列"}},[t._v("#")]),t._v(" 二、任务队列")]),t._v(" "),a("p",[t._v("单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等待。")]),t._v(" "),a("p",[t._v("如果排队时因为计算量大，CPU忙不多来，也就算了，但是很多时候CPU时闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等待结果出来，再往下执行。")]),t._v(" "),a("p",[t._v("JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。")]),t._v(" "),a("p",[t._v("于是，所有任务可以分为两种，一种是同步任务（sync），另一种是异步任务（async）。")]),t._v(" "),a("ul",[a("li",[t._v("同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务")]),t._v(" "),a("li",[t._v("异步任务指的是，不进入主进程，而是进入“任务队列”(task queue)的任务，只有“任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。")])]),t._v(" "),a("p",[t._v("具体来说，异步执行的机制如下：（同步执行也是如此，因为它可以被视为没有异步任务的异步执行）")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("所有同步任务都是在主线程上执行，形成一个执行栈。")])]),t._v(" "),a("li",[a("p",[t._v("主线程之外，还存在一个“任务队列”（task queue）。只要异步任务有了运行结果，就在“任务队列”之中放置一个事件。")])]),t._v(" "),a("li",[a("p",[t._v("一旦“执行栈”中的所有同步任务执行完毕，系统就会读取“任务队列”，看看里面还有哪些事件。哪些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。")])]),t._v(" "),a("li",[a("p",[t._v("主进程不断重复上面第三步。")])])])]),t._v(" "),a("h2",{attrs:{id:"三、事件和回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、事件和回调函数"}},[t._v("#")]),t._v(" 三、事件和回调函数")]),t._v(" "),a("p",[t._v("“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在“任务队列”中添加一个事件，表示相关的异步任务可以进入“执行栈”了。主进程读取“任务队列”，就是读取里面有哪些事件。")]),t._v(" "),a("p",[t._v("“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等）。只要执行过回调函数，这些事件发生时就会进入“任务队列”，等待主线程读取。")]),t._v(" "),a("p",[t._v("所谓“回调函数”（callback），就是那些会被主线程挂起来的代码，异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。")]),t._v(" "),a("p",[t._v("“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，“任务队列”上第一位的事件就自动进入主线程。但是，由于存在后问提到的“定时器”功能，主线程首先要检查一下执行时间，某些时间只有到了规定的时间，才能返回主线程。")]),t._v(" "),a("h2",{attrs:{id:"四、event-loop函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、event-loop函数"}},[t._v("#")]),t._v(" 四、Event Loop函数")]),t._v(" "),a("p",[t._v("主线程从“任务队列”中读取事件，这个过程是不断循环的，所以整个的这种运行机制又称为Event Loop（事件循环）。")]),t._v(" "),a("p",[t._v("为了更好的理解Event Loop，请看下图")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/Amyas/picgo-bed/master/amyas.github.io/js2022-03-24-11-46-55.png",alt:"js2022-03-24-11-46-55",width:"",height:""}}),t._v(" "),a("p",[t._v("上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部API，它们在“任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取“任务队列”，依次执行那些事件对应的回调函数。")]),t._v(" "),a("p",[t._v("执行栈中的代码（同步任务），总是在读取“任务队列”（异步任务）之前执行。请看下面这个例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" req "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nreq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nreq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nreq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nreq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("上面代码中的req.send方法是Ajax操作向服务器发送数据，它是一个异步任务，意味着只有当前脚本所有代码执行完，系统才回去读取“任务队列”。")])])}),[],!1,null,null,null);a.default=e.exports}}]);